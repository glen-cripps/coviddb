{"kernelspec":{"display_name":"Python 2 (system-wide)","language":"python","name":"python2"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.17"}}
{"cell_type":"code","execution_count":15,"metadata":{"trusted":true},"outputs":[],"source":"import datetime\nnum_days=7\nstart_sp = datetime.date.today() - datetime.timedelta(days=num_days)\nend_sp = datetime.date.today()\nfrom pandas_datareader import data as pdr\nimport pandas as pd\n\nimport arrow\ntoday_dt = arrow.now().format('YYYYMMDD')\nfinancial_indexes = pd.read_parquet(\"mwis.\" + today_dt + \".parquet\")\n"}
{"cell_type":"code","execution_count":31,"metadata":{"trusted":true},"outputs":[],"source":"# initialize a dataframe with the columns we want\nall_financials_df = pd.DataFrame()\nall_financials_df = pdr.get_data_yahoo('^GSPC', start_sp, end_sp)\nall_financials_df['yahoo_ticker'] = '^GSPC'\n\n# then delete the rows coz it will reload them in the loop below\nall_financials_df = all_financials_df[0:0]\n\nfor fin_index in financial_indexes['yahoo_ticker']:\n    try:\n        financials_df = pdr.get_data_yahoo(fin_index, start_sp, end_sp)\n        financials_df['yahoo_ticker'] = fin_index\n        financials_df['date'] = financials_df.index\n    except:\n        continue\n    all_financials_df = all_financials_df.append(financials_df)\n"}
{"cell_type":"code","execution_count":36,"metadata":{"trusted":true},"outputs":[],"source":"all_financials_df = all_financials_df.set_index('close').reset_index()\nall_financials_df = all_financials_df.set_index('date').reset_index()\nall_financials_df = all_financials_df.set_index('yahoo_ticker').reset_index()\n\n\nall_financials_df.columns = all_financials_df.columns.str.lower()\nall_financials_df.columns = all_financials_df.columns.str.replace(' ', '_')\nall_financials_df.columns = all_financials_df.columns.astype(str)\n"}
{"cell_type":"code","execution_count":37,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::63534e18-e296-4bac-98ed-7bc5142f325f","text/plain":"smc-blob::c939e8dc-5834-4e71-8e5f-e651c6ad9c65"},"execution_count":37,"metadata":{},"output_type":"execute_result"}],"source":"all_financials_df"}
{"cell_type":"code","execution_count":38,"metadata":{"trusted":true},"outputs":[],"source":"all_financials_df.to_parquet(\"mwi_prices.\"  + today_dt + \".parquet\", compression='GZIP')\n"}
{"cell_type":"code","execution_count":12,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::cb6ce173-3306-4610-a5c5-e56fe2f06560","text/plain":"smc-blob::e5589bf2-40a2-43d1-9cea-1db061e7e81c"},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":""}
{"cell_type":"code","execution_count":14,"metadata":{"trusted":true},"outputs":[],"source":"import sys\nimport os\n\n\nimport pandas_datareader.data as web\nimport datetime\nimport pandas as pd\n\nsleep_seconds = 0\nnum_days = 7\nrow_cap = 0\n"}
{"cell_type":"code","execution_count":18,"metadata":{"trusted":true},"outputs":[],"source":"# for now let's just get NASDAQ working\nexchanges = {\n    \"nyse\":\"http://old.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=nyse&render=download\",\n    \"amex\":\"http://old.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=amex&render=download\",\n    \"nasdaq\":\"http://old.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=nasdaq&render=download\"\n}\n"}
{"cell_type":"code","execution_count":19,"metadata":{"trusted":true},"outputs":[{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python2.7/dist-packages/ipykernel/__main__.py:3: FutureWarning: from_csv is deprecated. Please use read_csv(...) instead. Note that some of the default arguments are different, so please refer to the documentation for from_csv when changing your function calls\n  app.launch_new_instance()\n"}],"source":"iter = 1\nfor exchange_key in exchanges:\n    exchange_stocks = pd.DataFrame.from_csv(exchanges[exchange_key])\n    iter = iter+1\n\n"}
{"cell_type":"code","execution_count":20,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::8dbf6f05-a9ed-4f6a-ac6d-82849dea95ee","text/plain":"smc-blob::3dde2804-f3eb-4180-b993-2380885f88b5"},"execution_count":20,"metadata":{},"output_type":"execute_result"}],"source":"exchange_stocks"}
{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":""}
{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":"\n\n\n\n#stocks = df.index.tolist()\nprint(\"brealk\")\nimport arrow\nimport time\n#\n# # We will look at stock prices over the past year, starting at January 1, 2016\nstart = datetime.date.today() - datetime.timedelta(days=num_days)\nend = datetime.date.today()\n\ntoday_dt = arrow.now().format('YYYYMMDD')\n\nif row_cap > 0:\n    all_exchange_stocks = all_exchange_stocks.head(row_cap)\n\n#all_exchange_stocks = all_exchange_stocks.head(25)\niter = 1\nfor index, row in all_exchange_stocks.iterrows():\n    if iter == 1:\n        all_stocks_header = all_exchange_stocks[all_exchange_stocks.index==0]\n        stock_hist = web.DataReader(row.StockTicker, \"yahoo\", start, end)\n        time.sleep(sleep_seconds)\n        stock_hist.reset_index(inplace=True)\n        stock_hist[\"Exchange\"] = row.Exchange\n        stock_hist[\"StockTicker\"] = row.StockTicker\n        all_stocks_hist = stock_hist.copy()\n    else:\n        try:\n            print(\"processing \" + row.Exchange + \"-\" + row.StockTicker)\n            stock_hist = web.DataReader(row.StockTicker, \"yahoo\", start, end, retry_count=2)\n            time.sleep(sleep_seconds)\n            stock_hist.reset_index(inplace=True)\n            all_stocks_header = all_stocks_header.append(row, ignore_index=True)\n#            print(stock_hist.head())\n            stock_hist[\"Exchange\"] = row.Exchange\n            stock_hist[\"StockTicker\"] = row.StockTicker\n            all_stocks_hist = all_stocks_hist.append(stock_hist,ignore_index=True)\n        except:\n            print(\"wtf unable to download \" + row.Exchange + \"-\" + row.StockTicker)\n            pass\n    iter = iter + 1\n    #    print(stockdata.head())\n\n\nall_stocks_hist.columns = all_stocks_hist.columns.str.replace(' ', '_')\nall_stocks_hist.columns = all_stocks_hist.columns.astype(str)\n\nall_stocks_header.to_parquet('/home/user/Glens_work/all_stocks_header.' + today_dt + '.parquet',compression='gzip')\nall_stocks_hist.to_parquet('/home/user/Glens_work/all_stocks_hist.' + today_dt + '.parquet',compression='gzip')\n\n\n\n\nprint(all_stocks_header.head())\nprint(all_stocks_hist.head())\nprint(\"End!\")\n"}