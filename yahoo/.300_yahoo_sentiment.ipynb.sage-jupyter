{"kernelspec":{"display_name":"Python 2 (system-wide)","language":"python","name":"python2"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.17"}}
{"cell_type":"code","execution_count":3,"metadata":{"trusted":true},"outputs":[],"source":"import time\nimport arrow\ntoday_dt = arrow.now().format('YYYYMMDD')\n\n"}
{"cell_type":"code","execution_count":1,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"0.06\n-0.341666666667\n"}],"source":"from textblob import TextBlob\n\ntext = '''\nThe titular threat of The Blob has always struck me as the ultimate movie\nmonster: an insatiably hungry, amoeba-like mass able to penetrate\nvirtually any safeguard, capable of--as a doomed doctor chillingly\ndescribes it--\"assimilating flesh on contact.\nSnide comparisons to gelatin be damned, it's a concept with the most\ndevastating of potential consequences, not unlike the grey goo scenario\nproposed by technological theorists fearful of\nartificial intelligence run rampant.\n'''\n\nblob = TextBlob(text)\nblob.tags           # [('The', 'DT'), ('titular', 'JJ'),\n                    #  ('threat', 'NN'), ('of', 'IN'), ...]\n\nblob.noun_phrases   # WordList(['titular threat', 'blob',\n                    #            'ultimate movie monster',\n                    #            'amoeba-like mass', ...])\n\nfor sentence in blob.sentences:\n    print(sentence.sentiment.polarity)\n"}
{"cell_type":"code","execution_count":7,"metadata":{"trusted":true},"outputs":[],"source":"import pandas as pd\nnews = pd.read_parquet(\"yahoo_most_viewed.\"+today_dt+\".parquet\")\n"}
{"cell_type":"code","execution_count":8,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"smc-blob::6c3f2188-fdce-4aaa-91d0-f893902b305c"},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":"\nnews['text']"}
{"cell_type":"code","execution_count":10,"metadata":{"trusted":true},"outputs":[],"source":"def sentiment_calc(text):\n    try:\n        return TextBlob(text).sentiment\n    except:\n        return (0,0)\n\nnews['sentiment'] = news['text'].apply(lambda tweet: sentiment_calc(tweet))\n"}
{"cell_type":"code","execution_count":11,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::e37cb51d-6fd2-4bf3-b211-ca12db63b942","text/plain":"smc-blob::8e77bdd9-ed68-4aaf-9558-8aee7e9c611c"},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":"news"}
{"cell_type":"code","execution_count":12,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::a25852d9-7f54-48de-81c9-d6f1c4f1e574","text/plain":"smc-blob::1cd42618-14dd-4421-904f-e676c0a7522a"},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":"news[['sentiment_polarity', 'sentiment_subjectivity']] = pd.DataFrame(tweets['sentiment'].tolist(), index=tweets.index) \n\nnews"}
{"cell_type":"code","execution_count":14,"metadata":{"trusted":true},"outputs":[],"source":"wtf = tweets.drop(['sentiment'], axis=1)\nwtf.to_parquet(\"yahoo_most_viewed_sentiment.\" + today_dt + \".parquet\", compression='GZIP')\n"}
{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":""}