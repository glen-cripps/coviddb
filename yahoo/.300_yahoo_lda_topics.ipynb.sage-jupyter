{"kernelspec":{"display_name":"Python 3 (system-wide)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}}
{"cell_type":"code","execution_count":1,"metadata":{"trusted":true},"outputs":[],"source":"import re\nimport time\nimport json\nimport os\nimport pandas as pd\nimport arrow\ntoday_dt = arrow.now().format('YYYYMMDD')\nimport pandas as pd\nimport nltk\n\n"}
{"cell_type":"code","execution_count":2,"metadata":{"trusted":true},"outputs":[],"source":"news = pd.read_parquet(\"yahoo_most_viewed_bow_t100.\" + today_dt + \".parquet\")"}
{"cell_type":"code","execution_count":3,"metadata":{"trusted":true},"outputs":[{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.6/dist-packages/ipykernel/__main__.py:6: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"}],"source":"\nnews['nouns'] = news['word_list'] \nnews['postags'] = news['word_list'].map(nltk.pos_tag)\nfor idx, tags in news.iterrows():\n    tags = news['postags'][idx]\n    nouns = [word for word,pos in tags if (pos == 'NN' or pos == 'NNP' or pos == 'NNS' or pos == 'NNPS')]\n    news['nouns'][idx] = nouns"}
{"cell_type":"code","execution_count":4,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::e3d7b229-ed9e-4174-a81f-b9c9ec58dfe2","text/plain":"smc-blob::b4ca9f62-c9f0-4df3-85f3-96ec71bdad6c"},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":"news[['nouns', 'word_list']]"}
{"cell_type":"code","execution_count":5,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"smc-blob::c69d6eae-7bfa-4ae5-8dba-d06823425b3b"},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":"processed_docs = []\nprocessed_docs = news['nouns'].tolist()\nprocessed_docs[:2]"}
{"cell_type":"code","execution_count":6,"metadata":{"trusted":true},"outputs":[],"source":"import gensim\ndictionary = gensim.corpora.Dictionary(processed_docs)\n"}
{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":""}
{"cell_type":"code","execution_count":7,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"0 abov\n1 action\n2 activ\n3 ad\n4 administr\n5 agre\n6 agreement\n7 analog\n8 anyth\n9 author\n10 averag\n"}],"source":"count = 0\nfor k, v in dictionary.iteritems():\n    print(k, v)\n    count += 1\n    if count > 10:\n        break"}
{"cell_type":"code","execution_count":8,"metadata":{"trusted":true},"outputs":[],"source":"# remove words appearing less than 10 times or in more than 50% of the documents\ndictionary.filter_extremes(no_below=10, no_above=0.5, keep_n= 100000)\n"}
{"cell_type":"code","execution_count":9,"metadata":{"trusted":true},"outputs":[],"source":"bow_corpus = [dictionary.doc2bow(doc) for doc in processed_docs]\n"}
{"cell_type":"code","execution_count":10,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Word 13 (\"news\") appears 3 time.\nWord 14 (\"number\") appears 1 time.\nWord 15 (\"outbreak\") appears 1 time.\nWord 17 (\"point\") appears 4 time.\nWord 19 (\"presid\") appears 4 time.\nWord 25 (\"time\") appears 1 time.\nWord 26 (\"trump\") appears 15 time.\nWord 38 (\"crisi\") appears 1 time.\nWord 41 (\"march\") appears 1 time.\nWord 43 (\"respons\") appears 1 time.\nWord 46 (\"sinc\") appears 1 time.\nWord 48 (\"care\") appears 1 time.\n"}],"source":"document_num = 20\nbow_doc_x = bow_corpus[document_num]\n\nfor i in range(len(bow_doc_x)):\n    print(\"Word {} (\\\"{}\\\") appears {} time.\".format(bow_doc_x[i][0], \n                                                     dictionary[bow_doc_x[i][0]], \n                                                     bow_doc_x[i][1]))"}
{"cell_type":"code","execution_count":11,"metadata":{"trusted":true},"outputs":[],"source":"lda_model =  gensim.models.LdaMulticore(bow_corpus, \n                                   num_topics = 10,\n                                   id2word = dictionary,                                    \n                                   passes = 10,\n                                   workers = 2)"}
{"cell_type":"code","execution_count":12,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"Topic: 0 \nWords: 0.059*\"month\" + 0.050*\"i\" + 0.049*\"dure\" + 0.046*\"call\" + 0.045*\"world\" + 0.040*\"crisi\" + 0.038*\"thi\" + 0.035*\"nation\" + 0.034*\"possibl\" + 0.034*\"sinc\"\n\n\nTopic: 1 \nWords: 0.092*\"death\" + 0.084*\"sunday\" + 0.064*\"home\" + 0.062*\"china\" + 0.041*\"offici\" + 0.038*\"number\" + 0.034*\"restrict\" + 0.034*\"citi\" + 0.030*\"confirm\" + 0.027*\"place\"\n\n\nTopic: 2 \nWords: 0.099*\"time\" + 0.075*\"worker\" + 0.063*\"work\" + 0.054*\"home\" + 0.052*\"economi\" + 0.045*\"spread\" + 0.042*\"s\" + 0.042*\"share\" + 0.034*\"thi\" + 0.032*\"hospit\"\n\n\nTopic: 3 \nWords: 0.123*\"s\" + 0.080*\"nation\" + 0.080*\"presid\" + 0.078*\"unit\" + 0.049*\"trump\" + 0.035*\"month\" + 0.030*\"call\" + 0.028*\"effort\" + 0.025*\"author\" + 0.023*\"becaus\"\n\n\nTopic: 4 \nWords: 0.086*\"death\" + 0.086*\"hospit\" + 0.085*\"offici\" + 0.058*\"posit\" + 0.056*\"covid\" + 0.056*\"system\" + 0.037*\"york\" + 0.031*\"march\" + 0.031*\"saturday\" + 0.030*\"nation\"\n\n\nTopic: 5 \nWords: 0.078*\"ad\" + 0.071*\"test\" + 0.052*\"author\" + 0.038*\"number\" + 0.038*\"china\" + 0.033*\"march\" + 0.031*\"point\" + 0.026*\"travel\" + 0.023*\"person\" + 0.022*\"hospit\"\n\n\nTopic: 6 \nWords: 0.113*\"hospit\" + 0.103*\"york\" + 0.078*\"home\" + 0.063*\"order\" + 0.058*\"i\" + 0.033*\"person\" + 0.028*\"news\" + 0.028*\"spread\" + 0.025*\"place\" + 0.025*\"way\"\n\n\nTopic: 7 \nWords: 0.084*\"test\" + 0.057*\"world\" + 0.052*\"offici\" + 0.048*\"home\" + 0.046*\"saturday\" + 0.043*\"govern\" + 0.039*\"death\" + 0.035*\"way\" + 0.033*\"minist\" + 0.029*\"covid\"\n\n\nTopic: 8 \nWords: 0.179*\"trump\" + 0.076*\"presid\" + 0.056*\"economi\" + 0.050*\"time\" + 0.042*\"point\" + 0.038*\"crisi\" + 0.038*\"i\" + 0.035*\"outbreak\" + 0.034*\"news\" + 0.033*\"part\"\n\n\nTopic: 9 \nWords: 0.114*\"death\" + 0.082*\"govern\" + 0.082*\"hospit\" + 0.050*\"nation\" + 0.050*\"system\" + 0.050*\"media\" + 0.034*\"concern\" + 0.034*\"citi\" + 0.034*\"test\" + 0.034*\"news\"\n\n\n"}],"source":"for idx, topic in lda_model.print_topics(-1):\n    print(\"Topic: {} \\nWords: {}\".format(idx, topic ))\n    print(\"\\n\")"}
{"cell_type":"code","execution_count":13,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":"smc-blob::21f060a0-1419-4759-a5e9-97fbde2ba025"},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":"lda_model.show_topics(-1)"}
{"cell_type":"code","execution_count":14,"metadata":{"trusted":true},"outputs":[],"source":"top_words_per_topic = []\nfor t in range(lda_model.num_topics):\n    top_words_per_topic.extend([(t, ) + x for x in lda_model.show_topic(t, topn = 10)])\n\ntopics_df = pd.DataFrame(top_words_per_topic, columns=['topic', 'word', 'p'])"}
{"cell_type":"code","execution_count":15,"metadata":{"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::daf83a1d-fb33-4acc-9869-38bc57750c09","text/plain":"    topic     word         p\n0       0    month  0.059162\n1       0        i  0.049670\n2       0     dure  0.048573\n3       0     call  0.046067\n4       0    world  0.045216\n..    ...      ...       ...\n95      9    media  0.049780\n96      9  concern  0.034052\n97      9     citi  0.033943\n98      9     test  0.033640\n99      9     news  0.033583\n\n[100 rows x 3 columns]"},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":"topics_df"}
{"cell_type":"code","execution_count":16,"metadata":{"trusted":true},"outputs":[],"source":"topics_ct = pd.crosstab(index=[topics_df.topic], \n                           columns = topics_df.word, \n                           values=topics_df.p, \n                                  aggfunc=pd.Series.sum\n                           ).reset_index()\n"}
{"cell_type":"code","execution_count":17,"metadata":{"scrolled":true,"trusted":true},"outputs":[{"data":{"text/html":"smc-blob::fe631805-d869-47c8-b53b-9be6da397be1","text/plain":"smc-blob::e3a8307f-380c-492c-8ce5-22f82f247330"},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":"topics_ct.fillna(0)"}
{"cell_type":"code","execution_count":18,"metadata":{"trusted":true},"outputs":[],"source":"topics_tots = pd.crosstab( index=1,\n                           columns = topics_df.word, \n                           values=topics_df.p, \n                                  aggfunc=pd.Series.sum\n                           ).reset_index()\n"}
{"cell_type":"code","execution_count":32,"metadata":{"trusted":true},"outputs":[],"source":"topics_tots = topics_tots.add_prefix(\"ldan_\")"}
{"cell_type":"code","execution_count":34,"metadata":{"trusted":true},"outputs":[],"source":"topics_tots.drop(columns=['ldan_row_0']).to_parquet('yahoo_top_news_ldan_topics.' + today_dt + '.parquet')\n"}
{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":""}
{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":""}
{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":""}